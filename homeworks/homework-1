# Homework 1.1
* Code an ERC-20 token from scratch. You may look up the specifications here, but do not copy an existing codebase or ask Chat GPT. https://eips.ethereum.org/EIPS/eip-20
To pass this class, we expect you to know the ERC-20 standard like the back of your hand, so do not cheat on this assignment!

## CTF Excercise

The following ERC-20 token has a faulty implementation of _transfer(). How can it be exploited?
To find the exploit, write down the value of the variables at each step of the computation. Consider that the person doing the transaction can put any value they want for from, to, and amount. 
What edge cases should be considered?

```solidity
// assume that we check that `from` has proper allowance or ownership of the tokens
function _transfer(
      address from,
      address to,
      uint256 amount
  ) internal virtual {
      require(from != address(0), "ERC20: transfer from the zero address");
      require(to != address(0), "ERC20: transfer to the zero address");

      uint256 fromBalance = _balances[from];
      uint256 toBalance = _balances[to];

      require(
          fromBalance >= amount,
          "ERC20: transfer amount exceeds balance"
      );
      unchecked {
          _balances[from] = fromBalance - amount;
          // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
          // decrementing then incrementing.
          _balances[to] = toBalance + amount;
      }

      emit Transfer(from, to, amount);
  }
```
